.class public final Lv$b;
.super Lv$a;

.annotation system Ldalvik/annotation/EnclosingClass;
    value = Lv;
.end annotation
.annotation system Ldalvik/annotation/InnerClass;
    accessFlags = 9
    name = "b"
.end annotation

.field final static synthetic g:Z

.field private final static h:[B

.field private final static i:[B

.field public c:I

.field public final d:Z

.field public final e:Z

.field public final f:Z

.field private final j:[B

.field private k:I

.field private final l:[B

.method static constructor <clinit>()V
    .registers 2
    const/16 v1, 64
    const-class v0, Lv;
    invoke-virtual { v0 }, Ljava/lang/Class;->desiredAssertionStatus()Z
    move-result v0
    if-nez v0, :L1
    const/4 v0, 1
    :L0
    sput-boolean v0, Lv$b;->g:Z
    new-array v0, v1, [B
    fill-array-data v0, :L2
    sput-object v0, Lv$b;->h:[B
    new-array v0, v1, [B
    fill-array-data v0, :L3
    sput-object v0, Lv$b;->i:[B
    return-void
    :L1
    const/4 v0, 0
    goto :L0
    :L2
    .array-data 1
        65t
        66t
        67t
        68t
        69t
        70t
        71t
        72t
        73t
        74t
        75t
        76t
        77t
        78t
        79t
        80t
        81t
        82t
        83t
        84t
        85t
        86t
        87t
        88t
        89t
        90t
        97t
        98t
        99t
        100t
        101t
        102t
        103t
        104t
        105t
        106t
        107t
        108t
        109t
        110t
        111t
        112t
        113t
        114t
        115t
        116t
        117t
        118t
        119t
        120t
        121t
        122t
        48t
        49t
        50t
        51t
        52t
        53t
        54t
        55t
        56t
        57t
        43t
        47t
    .end array-data
    :L3
    .array-data 1
        65t
        66t
        67t
        68t
        69t
        70t
        71t
        72t
        73t
        74t
        75t
        76t
        77t
        78t
        79t
        80t
        81t
        82t
        83t
        84t
        85t
        86t
        87t
        88t
        89t
        90t
        97t
        98t
        99t
        100t
        101t
        102t
        103t
        104t
        105t
        106t
        107t
        108t
        109t
        110t
        111t
        112t
        113t
        114t
        115t
        116t
        117t
        118t
        119t
        120t
        121t
        122t
        48t
        49t
        50t
        51t
        52t
        53t
        54t
        55t
        56t
        57t
        45t
        95t
    .end array-data
.end method

.method public constructor <init>()V
    .registers 3
    const/4 v1, 0
    invoke-direct { p0 }, Lv$a;-><init>()V
    const/4 v0, 0
    iput-object v0, p0, Lv$b;->a:[B
    iput-boolean v1, p0, Lv$b;->d:Z
    iput-boolean v1, p0, Lv$b;->e:Z
    iput-boolean v1, p0, Lv$b;->f:Z
    sget-object v0, Lv$b;->i:[B
    iput-object v0, p0, Lv$b;->l:[B
    const/4 v0, 2
    new-array v0, v0, [B
    iput-object v0, p0, Lv$b;->j:[B
    iput v1, p0, Lv$b;->c:I
    iget-boolean v0, p0, Lv$b;->e:Z
    if-eqz v0, :L1
    const/16 v0, 19
    :L0
    iput v0, p0, Lv$b;->k:I
    return-void
    :L1
    const/4 v0, -1
    goto :L0
.end method

.method public final a([BI)Z
    .registers 14
    iget-object v0, p0, Lv$b;->l:[B
    iget-object v1, p0, Lv$b;->a:[B
    const/4 v2, 0
    iget v3, p0, Lv$b;->k:I
    const/4 v4, 0
    add-int/lit8 v5, p2, 0
    const/4 v6, -1
    iget v7, p0, Lv$b;->c:I
    packed-switch v7, :L33
    :L0
    move v10, v6
    move v6, v4
    move v4, v10
    :L1
    const/4 v7, -1
    if-eq v4, v7, :L32
    const/4 v7, 0
    add-int/lit8 v2, v2, 1
    shr-int/lit8 v8, v4, 18
    and-int/lit8 v8, v8, 63
    aget-byte v8, v0, v8
    aput-byte v8, v1, v7
    const/4 v7, 1
    add-int/lit8 v2, v2, 1
    shr-int/lit8 v8, v4, 12
    and-int/lit8 v8, v8, 63
    aget-byte v8, v0, v8
    aput-byte v8, v1, v7
    const/4 v7, 2
    add-int/lit8 v2, v2, 1
    shr-int/lit8 v8, v4, 6
    and-int/lit8 v8, v8, 63
    aget-byte v8, v0, v8
    aput-byte v8, v1, v7
    const/4 v7, 3
    add-int/lit8 v2, v2, 1
    and-int/lit8 v4, v4, 63
    aget-byte v4, v0, v4
    aput-byte v4, v1, v7
    add-int/lit8 v3, v3, -1
    if-nez v3, :L32
    iget-boolean v3, p0, Lv$b;->f:Z
    if-eqz v3, :L2
    const/4 v3, 4
    add-int/lit8 v2, v2, 1
    const/16 v4, 13
    aput-byte v4, v1, v3
    :L2
    add-int/lit8 v3, v2, 1
    const/16 v4, 10
    aput-byte v4, v1, v2
    const/16 v2, 19
    move v4, v3
    move v3, v2
    move v2, v6
    :L3
    add-int/lit8 v6, v2, 3
    if-gt v6, v5, :L8
    aget-byte v6, p1, v2
    and-int/lit16 v6, v6, 255
    shl-int/lit8 v6, v6, 16
    add-int/lit8 v7, v2, 1
    aget-byte v7, p1, v7
    and-int/lit16 v7, v7, 255
    shl-int/lit8 v7, v7, 8
    or-int/2addr v6, v7
    add-int/lit8 v7, v2, 2
    aget-byte v7, p1, v7
    and-int/lit16 v7, v7, 255
    or-int/2addr v6, v7
    shr-int/lit8 v7, v6, 18
    and-int/lit8 v7, v7, 63
    aget-byte v7, v0, v7
    aput-byte v7, v1, v4
    add-int/lit8 v7, v4, 1
    shr-int/lit8 v8, v6, 12
    and-int/lit8 v8, v8, 63
    aget-byte v8, v0, v8
    aput-byte v8, v1, v7
    add-int/lit8 v7, v4, 2
    shr-int/lit8 v8, v6, 6
    and-int/lit8 v8, v8, 63
    aget-byte v8, v0, v8
    aput-byte v8, v1, v7
    add-int/lit8 v7, v4, 3
    and-int/lit8 v6, v6, 63
    aget-byte v6, v0, v6
    aput-byte v6, v1, v7
    add-int/lit8 v2, v2, 3
    add-int/lit8 v4, v4, 4
    add-int/lit8 v3, v3, -1
    if-nez v3, :L3
    iget-boolean v3, p0, Lv$b;->f:Z
    if-eqz v3, :L31
    add-int/lit8 v3, v4, 1
    const/16 v6, 13
    aput-byte v6, v1, v4
    :L4
    add-int/lit8 v4, v3, 1
    const/16 v6, 10
    aput-byte v6, v1, v3
    const/16 v3, 19
    goto :L3
    :L5
    move v10, v6
    move v6, v4
    move v4, v10
    goto/16 :L1
    :L6
    const/4 v7, 2
    if-gt v7, v5, :L0
    iget-object v6, p0, Lv$b;->j:[B
    const/4 v7, 0
    aget-byte v6, v6, v7
    and-int/lit16 v6, v6, 255
    shl-int/lit8 v6, v6, 16
    const/4 v7, 0
    add-int/lit8 v4, v4, 1
    aget-byte v7, p1, v7
    and-int/lit16 v7, v7, 255
    shl-int/lit8 v7, v7, 8
    or-int/2addr v6, v7
    const/4 v7, 1
    add-int/lit8 v4, v4, 1
    aget-byte v7, p1, v7
    and-int/lit16 v7, v7, 255
    or-int/2addr v6, v7
    const/4 v7, 0
    iput v7, p0, Lv$b;->c:I
    move v10, v6
    move v6, v4
    move v4, v10
    goto/16 :L1
    :L7
    if-lez v5, :L0
    iget-object v6, p0, Lv$b;->j:[B
    const/4 v7, 0
    aget-byte v6, v6, v7
    and-int/lit16 v6, v6, 255
    shl-int/lit8 v6, v6, 16
    iget-object v7, p0, Lv$b;->j:[B
    const/4 v8, 1
    aget-byte v7, v7, v8
    and-int/lit16 v7, v7, 255
    shl-int/lit8 v7, v7, 8
    or-int/2addr v6, v7
    const/4 v7, 0
    add-int/lit8 v4, v4, 1
    aget-byte v7, p1, v7
    and-int/lit16 v7, v7, 255
    or-int/2addr v6, v7
    const/4 v7, 0
    iput v7, p0, Lv$b;->c:I
    goto/16 :L0
    :L8
    iget v6, p0, Lv$b;->c:I
    sub-int v6, v2, v6
    const/4 v7, 1
    sub-int v7, v5, v7
    if-ne v6, v7, :L15
    const/4 v6, 0
    iget v7, p0, Lv$b;->c:I
    if-lez v7, :L14
    iget-object v7, p0, Lv$b;->j:[B
    const/4 v8, 0
    add-int/lit8 v6, v6, 1
    aget-byte v7, v7, v8
    move v10, v7
    move v7, v6
    move v6, v2
    move v2, v10
    :L9
    and-int/lit16 v2, v2, 255
    shl-int/lit8 v2, v2, 4
    iget v8, p0, Lv$b;->c:I
    sub-int v7, v8, v7
    iput v7, p0, Lv$b;->c:I
    add-int/lit8 v7, v4, 1
    shr-int/lit8 v8, v2, 6
    and-int/lit8 v8, v8, 63
    aget-byte v8, v0, v8
    aput-byte v8, v1, v4
    add-int/lit8 v4, v7, 1
    and-int/lit8 v2, v2, 63
    aget-byte v0, v0, v2
    aput-byte v0, v1, v7
    iget-boolean v0, p0, Lv$b;->d:Z
    if-eqz v0, :L30
    add-int/lit8 v0, v4, 1
    const/16 v2, 61
    aput-byte v2, v1, v4
    add-int/lit8 v2, v0, 1
    const/16 v4, 61
    aput-byte v4, v1, v0
    move v0, v2
    :L10
    iget-boolean v2, p0, Lv$b;->e:Z
    if-eqz v2, :L12
    iget-boolean v2, p0, Lv$b;->f:Z
    if-eqz v2, :L11
    add-int/lit8 v2, v0, 1
    const/16 v4, 13
    aput-byte v4, v1, v0
    move v0, v2
    :L11
    add-int/lit8 v2, v0, 1
    const/16 v4, 10
    aput-byte v4, v1, v0
    move v0, v2
    :L12
    move v1, v0
    move v0, v6
    :L13
    sget-boolean v2, Lv$b;->g:Z
    if-nez v2, :L26
    iget v2, p0, Lv$b;->c:I
    if-eqz v2, :L26
    new-instance v0, Ljava/lang/AssertionError;
    invoke-direct { v0 }, Ljava/lang/AssertionError;-><init>()V
    throw v0
    :L14
    add-int/lit8 v7, v2, 1
    aget-byte v2, p1, v2
    move v10, v7
    move v7, v6
    move v6, v10
    goto :L9
    :L15
    iget v6, p0, Lv$b;->c:I
    sub-int v6, v2, v6
    const/4 v7, 2
    sub-int v7, v5, v7
    if-ne v6, v7, :L23
    const/4 v6, 0
    iget v7, p0, Lv$b;->c:I
    const/4 v8, 1
    if-le v7, v8, :L21
    iget-object v7, p0, Lv$b;->j:[B
    const/4 v8, 0
    add-int/lit8 v6, v6, 1
    aget-byte v7, v7, v8
    move v10, v7
    move v7, v6
    move v6, v2
    move v2, v10
    :L16
    and-int/lit16 v2, v2, 255
    shl-int/lit8 v2, v2, 10
    iget v8, p0, Lv$b;->c:I
    if-lez v8, :L22
    iget-object v8, p0, Lv$b;->j:[B
    add-int/lit8 v9, v7, 1
    aget-byte v7, v8, v7
    move v8, v9
    move v10, v6
    move v6, v7
    move v7, v10
    :L17
    and-int/lit16 v6, v6, 255
    shl-int/lit8 v6, v6, 2
    or-int/2addr v2, v6
    iget v6, p0, Lv$b;->c:I
    sub-int/2addr v6, v8
    iput v6, p0, Lv$b;->c:I
    add-int/lit8 v6, v4, 1
    shr-int/lit8 v8, v2, 12
    and-int/lit8 v8, v8, 63
    aget-byte v8, v0, v8
    aput-byte v8, v1, v4
    add-int/lit8 v4, v6, 1
    shr-int/lit8 v8, v2, 6
    and-int/lit8 v8, v8, 63
    aget-byte v8, v0, v8
    aput-byte v8, v1, v6
    add-int/lit8 v6, v4, 1
    and-int/lit8 v2, v2, 63
    aget-byte v0, v0, v2
    aput-byte v0, v1, v4
    iget-boolean v0, p0, Lv$b;->d:Z
    if-eqz v0, :L29
    add-int/lit8 v0, v6, 1
    const/16 v2, 61
    aput-byte v2, v1, v6
    :L18
    iget-boolean v2, p0, Lv$b;->e:Z
    if-eqz v2, :L20
    iget-boolean v2, p0, Lv$b;->f:Z
    if-eqz v2, :L19
    add-int/lit8 v2, v0, 1
    const/16 v4, 13
    aput-byte v4, v1, v0
    move v0, v2
    :L19
    add-int/lit8 v2, v0, 1
    const/16 v4, 10
    aput-byte v4, v1, v0
    move v0, v2
    :L20
    move v1, v0
    move v0, v7
    goto/16 :L13
    :L21
    add-int/lit8 v7, v2, 1
    aget-byte v2, p1, v2
    move v10, v7
    move v7, v6
    move v6, v10
    goto :L16
    :L22
    add-int/lit8 v8, v6, 1
    aget-byte v6, p1, v6
    move v10, v8
    move v8, v7
    move v7, v10
    goto :L17
    :L23
    iget-boolean v0, p0, Lv$b;->e:Z
    if-eqz v0, :L25
    if-lez v4, :L25
    const/16 v0, 19
    if-eq v3, v0, :L25
    iget-boolean v0, p0, Lv$b;->f:Z
    if-eqz v0, :L28
    add-int/lit8 v0, v4, 1
    const/16 v6, 13
    aput-byte v6, v1, v4
    :L24
    add-int/lit8 v4, v0, 1
    const/16 v6, 10
    aput-byte v6, v1, v0
    :L25
    move v0, v2
    move v1, v4
    goto/16 :L13
    :L26
    sget-boolean v2, Lv$b;->g:Z
    if-nez v2, :L27
    if-eq v0, v5, :L27
    new-instance v0, Ljava/lang/AssertionError;
    invoke-direct { v0 }, Ljava/lang/AssertionError;-><init>()V
    throw v0
    :L27
    iput v1, p0, Lv$b;->b:I
    iput v3, p0, Lv$b;->k:I
    const/4 v0, 1
    return v0
    :L28
    move v0, v4
    goto :L24
    :L29
    move v0, v6
    goto :L18
    :L30
    move v0, v4
    goto/16 :L10
    :L31
    move v3, v4
    goto/16 :L4
    :L32
    move v4, v2
    move v2, v6
    goto/16 :L3
    :L33
    .packed-switch 0
        :L5
        :L6
        :L7
    .end packed-switch
.end method
